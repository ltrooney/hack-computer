// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

    static Array string;
    static int length;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        let string = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        if(~(j > (length-1)) & ~(j < 0)) { // make sure j is in the range
            return string[j];
        }
        return 0;
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        if(~(j > (length-1)) & ~(j < 0)) { // make sure j is in the range
            let string[j] = c;
        }
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        let string[length] = c;
        let length = length + 1;
        return string;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        let length = length - 1;
        let string[length] = 32;  
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int value;
        var int i;
        var int digit;
        let value = 0;
        let i = 1;

        while(i < length) {
            let digit = string[i] + 48; // converts digit to ASCII
            let value = (value * 10) + digit;
        }
        return value;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        var int lastDigit;
        var int lastChar;
        var int c;

        if(number < 0) {
            do appendChar(45); // appends negative sign
        }

        while(number > 9) {
            let lastDigit = number-((number/10)*10); // computes number%10
            let c = lastDigit + 48; // 48 = ASCII code for '0'
            do appendChar(c);
            let number = number / 10; // truncates last digit
        }
        let lastChar = number + 48;
        do appendChar(lastChar); // adds the last number
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
