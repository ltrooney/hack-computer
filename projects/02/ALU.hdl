// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // case zx = 0, zero all x bits;
    // case zx = 1, x=x
    Mux16(a=x,b=false,sel=zx,out=outx1); 

    // case nx = 0, x=x;
    // case nx = 1, Not16(in=x,out=x)
    Not16(in=outx1,out=notx); 
    Mux16(a=outx1,b=notx,sel=nx,out=outx2); 

    // same for y
    Mux16(a=y,b=false,sel=zy,out=outy1); 
    Not16(in=outy1,out=noty); 
    Mux16(a=outy1,b=noty,sel=ny,out=outy2); 

    // x & y --> andxy
    And16(a=outx2,b=outy2,out=andxy); 

    // x + y --> addxy
    Add16(a=outx2,b=outy2,out=addxy); 

    // case f = 0 --> andxy, else --> addxy
    Mux16(a=andxy,b=addxy,sel=f,out=aoa); // aoa = and or add

    Not16(in=aoa,out=naoa); // naoa = not and or add

    // case 'no' (negate output) = 1 --> out=naoa, else out=aoa
    Mux16(a=aoa,b=naoa,sel=no,out=final); // need to save output in final to use below

    Mux16(a=final,b=false,sel=false,out=out); // send final to output

    // if any of out's 16 bits is 1, then 'zr' will be 0
    IsZero(a=final,out=zr);

    // if MSB of out (out[15]) is 1, then 'ng' will be 1
    IsNegative(a=final,out=ng);
}